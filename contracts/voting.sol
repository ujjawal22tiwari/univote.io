// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

/**
 * @title Voting
 * @dev Very small contract that lets anyone
 *      â€¢ add a candidate (name + party)
 *      â€¢ read total number of candidates
 *      â€¢ read any candidateâ€™s details  âžœ  candidates(uint _index)
 *      â€¢ cast one vote per wallet
 *
 * The autogenerated public getter for the `candidates` array
 * already matches the call your frontend is making:
 *     candidates(i) â†’ (string name, string party, uint voteCount)
 */
contract Voting {
    /// -----------------------------------------------------------
    /// Data
    /// -----------------------------------------------------------

    struct Candidate {
        string name;
        string party;
        uint256 voteCount;
    }

    // Dynamic list of all candidates
    Candidate[] public candidates;

    // Track whether an address has already voted
    mapping(address => bool) public hasVoted;

    /// -----------------------------------------------------------
    /// Events
    /// -----------------------------------------------------------

    event CandidateAdded(uint256 indexed id, string name, string party);
    event Voted(address indexed voter, uint256 indexed candidateId);

    /// -----------------------------------------------------------
    /// Write functions
    /// -----------------------------------------------------------

    /**
     * @notice Add a new candidate (any connected wallet can call this;
     *         if you want only the deployer to add, add an `onlyOwner`
     *         modifier or check `msg.sender`).
     */
    function addCandidate(
        string calldata _name,
        string calldata _party
    ) external {
        candidates.push(Candidate(_name, _party, 0));
        emit CandidateAdded(candidates.length - 1, _name, _party);
    }

    /**
     * @notice Cast one vote for a candidate.
     *         Each wallet may vote only once.
     */
    function vote(uint256 _candidateId) external {
        require(_candidateId < candidates.length, "Invalid candidate");
        require(!hasVoted[msg.sender], "You have already voted");

        candidates[_candidateId].voteCount += 1;
        hasVoted[msg.sender] = true;

        emit Voted(msg.sender, _candidateId);
    }

    /// -----------------------------------------------------------
    /// Read functions
    /// -----------------------------------------------------------

    /**
     * @return Total number of candidates â€” used by your frontendâ€™s
     *         `getCandidateCount()` call.
     */
    function getCandidateCount() external view returns (uint256) {
        return candidates.length;
    }

    /**
     * ðŸ‘‡ The following getter is *auto-generated* by Solidity for
     *     the public array, so no need to write it manually:
     *
     *     function candidates(uint256)
     *         external
     *         view
     *         returns (string memory name,
     *                  string memory party,
     *                  uint256 voteCount);
     */
}
